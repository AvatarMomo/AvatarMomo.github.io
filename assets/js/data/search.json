[ { "title": "Create Gitea server using Ansible and docker", "url": "/posts/install-gitea-on-a-server-using-ansible/", "categories": "homelab, gitea", "tags": "gitea, docker, ansible, homelab", "date": "2022-03-06 07:10:00 +0100", "snippet": "About Gitea, docker, ssh workaroundGitea is a lightweight git server you can self-host in your home lab using docker. There are some configurations you have to do to get it properly working with ssh since Gitea is running inside a docker, and it does not play easily with the server ssh etc.I have created and Ansible playbook with the tasks to perform to create a git user on the server and configure it with the docker following the official guideCreate the playbook- name: Create git user on the server along with ssh keys ansible.builtin.user: name: git comment: git uid: 1500 generate_ssh_key: yes ssh_key_type: rsa ssh_key_bits: 4096- name: Print Debug info of the user created getent: database: passwd key: git- debug: var: ansible_facts.getent_passwd# - name: Generate /home/git/.ssh/id_rsa SSH RSA host key# command : sudo -u git ssh-keygen -q -t rsa -b 4096 -C &quot;&quot; -N &quot;&quot; -f /home/git/.ssh/id_rsa# args:# creates: /home/git/.ssh/id_rsa- name: Copy public key to the client machine, workaround for authorized_key task fetch: src: /home/git/.ssh/id_rsa.pub dest: /tmp/ flat: yes- name: Set authorized key took from file authorized_key: user: git state: present key: &quot;{{ lookup(&#39;file&#39;, &#39;/tmp/id_rsa.pub&#39;) }}&quot;- name: Set permission command : sudo -u git chmod 600 /home/git/.ssh/authorized_keys- name: Insert a ssh command to authorized_keys lineinfile: path: /home/git/.ssh/authorized_keys line: command=&quot;/usr/local/bin/gitea --config=/data/gitea/conf/app.ini serv key-1&quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty &amp;lt;user pubkey&amp;gt;- name: Copy script to server ansible.builtin.copy: src: gitea dest: /usr/local/bin/gitea owner: &quot;git&quot; group: &quot;git&quot; mode: u+x- name: Create gitea container docker_container: name: gitea image: gitea/gitea state: started recreate: yes restart_policy: always env: USER_UID: &quot;1500&quot; USER_GID: &quot;1500&quot; volumes: - /data/gitea:/data - /home/git/.ssh/:/data/git/.ssh - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro published_ports: - &quot;3000:3000&quot; - &quot;2222:22&quot;Install the Gitea serverAfter the playbook is executed, follow the webui instructions to install Gitea.This will create the app.ini config file in the data/gitea/gitea/conf/app.ini.Here is a redacted version of the file with the important configs for future reference.APP_NAME = Git ServerRUN_MODE = prodRUN_USER = git[server]APP_DATA_PATH = /data/giteaDOMAIN = git.example.comSSH_DOMAIN = git.example.comHTTP_PORT = 3000ROOT_URL = http://git.example.com/DISABLE_SSH = falseSSH_PORT = 22SSH_LISTEN_PORT = 22LFS_START_SERVER = trueLFS_CONTENT_PATH = /data/git/lfsLFS_JWT_SECRET = OFFLINE_MODE = false" }, { "title": "Create a simple ansible project for setting up your cloud VM instance", "url": "/posts/how-to-create-basic-ansible-project-for-managing-your-cloud-vm/", "categories": "Server, Ansible", "tags": "Server, Ansible, Oracle Cloud server, playbook", "date": "2022-02-26 15:10:00 +0100", "snippet": "Requirements Create a server in your favorite cloud provider and make sure ssh is working. Install ansibleSetting up simple ansible projectToday I tried to setup a VM in Oracle Private Cloud using their free tier offerings.This is an easy way to get a server up and running. More info is available here. I am also documenting how to setup your basic ansible project to manage your VM.Here I am using Oracle Linux 9 to setup my vm.This is the basic overview of the files you need to create the basic Infrastructure as a code setup using ansible.folder overview of the ansible projectðŸ“¦oracle_cloud_iac â”£ ðŸ“‚group_vars â”ƒ â”— ðŸ“‚all â”ƒ â”ƒ â”— ðŸ“œvars.yml â”£ ðŸ“‚tasks â”ƒ â”— ðŸ“œsetup.yml â”£ ðŸ“œansible.cfg â”£ ðŸ“œhosts â”— ðŸ“œtasks_playbook.ymlSetting up hostshosts is where you configure your connection to your VM. Make sure to edit this file.[server]opc_server ansible_host=INSTANCE_PUBLIC_IP ansible_port=22 ansible_user=opc ansible_connection=ssh ansible_ssh_private_key_file=/home/user/.ssh/id_rsaSetting up ansible.cfgThis is where ansible specific settings are specified.[defaults]INVENTORY = hosts[ssh_connections]pipelining = trueSetting up vars.ymlThe vars.yml file is used to store variable that you can access from your playbooks.Here I am using it to keep a list of packages that I would like to install.username: opc packages_essential: - vim - oracle-epel-release-el8 - emacs - tmux - git - python3-pip - dnf-utils - zip - unzipSetting up simple playbookI am going to create a playbook that will execute commands as root on my configured server.---- hosts: opc_server become: yes tasks: - import_tasks: tasks/setup.ymlAdd tasksIn this task I have put some basic commands like updating and installing packages including docker.- name: Update packages dnf: name: &quot;*&quot; state: latest- name: Install packages dnf: name: &quot;{{packages_essential}}&quot; state: latest- name: Install Docker Module for Python pip: name: docker- name: Add docker repo shell: &#39;dnf config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo&#39;- name: Install Docker dnf: name: &quot;docker-ce&quot; state: latest- name: Enable service docker and ensure it is not masked systemd: name: docker enabled: yes masked: no- name: Start docker service systemd: state: started name: dockerRunning the ansible playbookFinally run the ansible playbook from your terminal$ ansible-playbook tasks_playbook.ymlIf there are errors with any tasks playbook will stop executionWish you all the best." }, { "title": "First Post by Prof. Momo", "url": "/posts/FirstPost/", "categories": "Blog, Jekyll", "tags": "Blog", "date": "2022-02-20 07:10:00 +0100", "snippet": "Hello World" } ]
